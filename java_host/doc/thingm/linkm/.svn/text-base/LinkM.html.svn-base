<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_17) on Sun May 16 16:07:00 PDT 2010 -->
<TITLE>
LinkM
</TITLE>

<META NAME="date" CONTENT="2010-05-16">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="LinkM";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../thingm/linkm/package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../thingm/linkm/BlinkMScriptLine.html" title="class in thingm.linkm"><B>PREV CLASS</B></A>&nbsp;
&nbsp;NEXT CLASS</FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../index.html?thingm/linkm/LinkM.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="LinkM.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
thingm.linkm</FONT>
<BR>
Class LinkM</H2>
<PRE>
java.lang.Object
  <IMG SRC="../../resources/inherit.gif" ALT="extended by "><B>thingm.linkm.LinkM</B>
</PRE>
<HR>
<DL>
<DT><PRE>public class <B>LinkM</B><DT>extends java.lang.Object</DL>
</PRE>

<P>
The entry point into the LinkM Java API.
 It depends on a native C library, named (depending on your OS)
 "libLinkM.dylib", "libLinkM.so", "LinkM.dll". 
 
 This class also provides a main() function that acts as a command-line
 exerciser of the API.
<P>

<P>
<HR>

<P>
<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Field Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#debug">debug</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#maxScriptLength">maxScriptLength</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#pausemillis">pausemillis</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#writePauseMillis">writePauseMillis</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#LinkM()">LinkM</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#bootload(java.lang.String, boolean)">bootload</A></B>(java.lang.String&nbsp;filename,
         boolean&nbsp;reset)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#bootloadReset()">bootloadReset</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#close()">close</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Close LinkM dongle</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#cmd(int, int, int, int, int)">cmd</A></B>(int&nbsp;addr,
    int&nbsp;cmd,
    int&nbsp;arg1,
    int&nbsp;arg2,
    int&nbsp;arg3)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Send a common 1-cmd + 3-arg style of command, with no response.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#commandi2c(byte[], byte[])">commandi2c</A></B>(byte[]&nbsp;buf_send,
           byte[]&nbsp;buf_recv)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Do an I2C transaction via the dongle
 length of both byte arrays determines amount of data sent or received</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#debug(java.lang.String)">debug</A></B>(java.lang.String&nbsp;s)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;simple debug facilty</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#doFactoryReset(int)">doFactoryReset</A></B>(int&nbsp;addr)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set a BlinkM back to factory settings
 Sets the i2c address to 0x09
 Writes a new light script and sets the startup paramters</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#eeParamLoad()">eeParamLoad</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Load the playticker parameters from EEPROM to RAM</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#eeParamSave()">eeParamSave</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Save the playticker parameters from RAM to EEPROM</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#fadeToHSB(int, int, int, int)">fadeToHSB</A></B>(int&nbsp;addr,
          int&nbsp;h,
          int&nbsp;s,
          int&nbsp;b)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fade to a color by HSB.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#fadeToRandomHSB(int, int, int, int)">fadeToRandomHSB</A></B>(int&nbsp;addr,
                int&nbsp;h,
                int&nbsp;s,
                int&nbsp;b)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fade to a random HSB color.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#fadeToRandomRGB(int, int, int, int)">fadeToRandomRGB</A></B>(int&nbsp;addr,
                int&nbsp;r,
                int&nbsp;g,
                int&nbsp;b)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fade to a random color.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#fadeToRGB(int[], java.awt.Color[], int)">fadeToRGB</A></B>(int[]&nbsp;addrs,
          java.awt.Color[]&nbsp;colors,
          int&nbsp;count)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fade a list of devices to a list of RGB colors
 FIXME: this doesn't work</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#fadeToRGB(int, java.awt.Color)">fadeToRGB</A></B>(int&nbsp;addr,
          java.awt.Color&nbsp;color)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fade the blinkm at 'addr' to the specified color</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#fadeToRGB(int, int, int, int)">fadeToRGB</A></B>(int&nbsp;addr,
          int&nbsp;r,
          int&nbsp;g,
          int&nbsp;b)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fade the blinkm at 'addr' to the specified color</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#getLinkMVersion()">getLinkMVersion</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get LinkM firmware version</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#getPlayset()">getPlayset</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get playticker parameters</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.awt.Color</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#getRGBColor(int)">getRGBColor</A></B>(int&nbsp;addr)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the RGB color the BlinkM is currently at.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#getVersion(int)">getVersion</A></B>(int&nbsp;addr)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the version of a BlinkM at a specific address</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#goBootload()">goBootload</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tell LinkM to switch to its USB bootloader mode</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#hex(int, int)">hex</A></B>(int&nbsp;what,
    int&nbsp;digits)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Utility: int to string
 Stolen from Processing's PApplet.java</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#i2cEnable(boolean)">i2cEnable</A></B>(boolean&nbsp;state)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enable or disable the I2C bus buffer
 By selectively disabling and enabling the bus buffer you can do hotswap</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#i2cInit()">i2cInit</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(Re)Initialize the I2C subsystem on LinkM</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#i2cScan(int, int)">i2cScan</A></B>(int&nbsp;start_addr,
        int&nbsp;end_addr)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FIXME: currently ignores start_addr and end_addr</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#i2cScan16(int, int)">i2cScan16</A></B>(int&nbsp;start_addr,
          int&nbsp;end_addr)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Scan the I2C bus
 FIXME: only works for spans up to 16 addrs</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#loadFile(java.io.File)">loadFile</A></B>(java.io.File&nbsp;filename)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Load a text file and turn it into an array of Strings.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#loadFile(java.lang.String)">loadFile</A></B>(java.lang.String&nbsp;filename)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Load a text file and turn it into an array of Strings.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#main(java.lang.String[])">main</A></B>(java.lang.String[]&nbsp;args)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#off(int)">off</A></B>(int&nbsp;addr)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Turn BlinkM at address addr off.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#open()">open</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Open the first LinkM found</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#parseArgBuf(java.lang.String)">parseArgBuf</A></B>(java.lang.String&nbsp;s)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Utility: Split up a string into parts, each parsed as a num,hex,char</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#parseHexDecInt(java.lang.String)">parseHexDecInt</A></B>(java.lang.String&nbsp;s)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Utility: parse a hex or decimal integer</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;<A HREF="../../thingm/linkm/BlinkMScript.html" title="class in thingm.linkm">BlinkMScript</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#parseScript(java.lang.String)">parseScript</A></B>(java.lang.String&nbsp;scriptstr)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Take a String containing an entire script and turn it into a BlinkMScript</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;<A HREF="../../thingm/linkm/BlinkMScript.html" title="class in thingm.linkm">BlinkMScript</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#parseScript(java.lang.String[])">parseScript</A></B>(java.lang.String[]&nbsp;lines)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Take an array of Strings and turn them into a BlinkMScript object</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;<A HREF="../../thingm/linkm/BlinkMScript.html" title="class in thingm.linkm">BlinkMScript</A>[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#parseScripts(java.lang.String[])">parseScripts</A></B>(java.lang.String[]&nbsp;lines)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Take an array of Strings and turn them into an array BlinkMScripts
 (assumes the strings actually comprised more than one script)
 FIXME: this is a really dumb way of doing this, gotta think more Perly</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#pause(int)">pause</A></B>(int&nbsp;millis)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Utility: A simple delay</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#playScript(int)">playScript</A></B>(int&nbsp;addr)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Plays the eeprom script (script id 0) from start, forever</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#playScript(int, int, int, int)">playScript</A></B>(int&nbsp;addr,
           int&nbsp;script_id,
           int&nbsp;reps,
           int&nbsp;pos)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Play a light script</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#print(java.lang.String)">print</A></B>(java.lang.String&nbsp;s)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#printHexString(java.lang.String, byte[])">printHexString</A></B>(java.lang.String&nbsp;intro,
               byte[]&nbsp;buf)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#println(java.lang.String)">println</A></B>(java.lang.String&nbsp;s)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#readInputs(int)">readInputs</A></B>(int&nbsp;addr)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Read inputs on BlinkMs that have inputs</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../thingm/linkm/BlinkMScript.html" title="class in thingm.linkm">BlinkMScript</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#readScript(int, int, boolean)">readScript</A></B>(int&nbsp;addr,
           int&nbsp;script_id,
           boolean&nbsp;readAll)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Read an entire light script from a BlinkM at address 'addr' 
 FIXME: this only really works for script_id==0</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../thingm/linkm/BlinkMScriptLine.html" title="class in thingm.linkm">BlinkMScriptLine</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#readScriptLine(int, int, int)">readScriptLine</A></B>(int&nbsp;addr,
               int&nbsp;script_id,
               int&nbsp;pos)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Read a BlinkMScriptLine from 'script_id' and pos 'pos', 
 from BlinkM at 'addr'.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#readScriptToString(int, int, boolean)">readScriptToString</A></B>(int&nbsp;addr,
                   int&nbsp;script_id,
                   boolean&nbsp;readAll)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Read an entire light script, return as a string</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#respSizeForCommand(int)">respSizeForCommand</A></B>(int&nbsp;c)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Essentially a sparse-array lookup-table for those commands that may 
 return a value.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#saveFile(java.io.File, java.lang.String)">saveFile</A></B>(java.io.File&nbsp;file,
         java.lang.String&nbsp;scriptstr)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Take a script in String format and save it to as a text file.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#saveFile(java.lang.String, java.lang.String)">saveFile</A></B>(java.lang.String&nbsp;filename,
         java.lang.String&nbsp;scriptstr)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Save a script in string format to a file</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#setAddress(int, int)">setAddress</A></B>(int&nbsp;addr,
           int&nbsp;newaddr)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the I2C address of a BlinkM</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#setFadeSpeed(int, int)">setFadeSpeed</A></B>(int&nbsp;addr,
             int&nbsp;fadespeed)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set fade speed of a BlinkM</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#setPlayset(boolean, int, int, int, int, int, int)">setPlayset</A></B>(boolean&nbsp;playing,
           int&nbsp;script_id,
           int&nbsp;script_tick,
           int&nbsp;script_len,
           int&nbsp;start_pos,
           int&nbsp;fadespeed,
           int&nbsp;dir)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the playticker / playset parameters</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#setRGB(int, java.awt.Color)">setRGB</A></B>(int&nbsp;addr,
       java.awt.Color&nbsp;color)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the blinkm at 'addr' to the specified RGB color</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#setRGB(int, int, int, int)">setRGB</A></B>(int&nbsp;addr,
       int&nbsp;r,
       int&nbsp;g,
       int&nbsp;b)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the blinkm at 'addr' to the specified RGB color</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#setScriptLengthRepeats(int, int, int)">setScriptLengthRepeats</A></B>(int&nbsp;addr,
                       int&nbsp;len,
                       int&nbsp;reps)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set light script default length and repeats.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#setStartupParams(int, int, int, int, int, int)">setStartupParams</A></B>(int&nbsp;addr,
                 int&nbsp;mode,
                 int&nbsp;script_id,
                 int&nbsp;reps,
                 int&nbsp;fadespeed,
                 int&nbsp;timeadj)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set boot params   cmd,mode,id,reps,fadespeed,timeadj</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#setStartupParamsDefault(int)">setStartupParamsDefault</A></B>(int&nbsp;addr)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Default values for startup params</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#setTimeAdj(int, int)">setTimeAdj</A></B>(int&nbsp;addr,
           int&nbsp;timeadj)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set time adjust of a BlinkM light script playing</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#statusLED(int)">statusLED</A></B>(int&nbsp;val)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the state of LinkM's status LED</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#stopScript(int)">stopScript</A></B>(int&nbsp;addr)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stop any playing script at address 'addr'</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#usage()">usage</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Demonstrates library usage by creating little command-line tool</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#writeScript(int, thingm.linkm.BlinkMScript)">writeScript</A></B>(int&nbsp;addr,
            <A HREF="../../thingm/linkm/BlinkMScript.html" title="class in thingm.linkm">BlinkMScript</A>&nbsp;script)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Write an entire BlinkM light script as a BlinkMScript
 to blinkm at address 'addr'.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#writeScript(int, java.lang.String)">writeScript</A></B>(int&nbsp;addr,
            java.lang.String&nbsp;scriptstr)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Write an entire light script contained in a string</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../thingm/linkm/LinkM.html#writeScriptLine(int, int, thingm.linkm.BlinkMScriptLine)">writeScriptLine</A></B>(int&nbsp;addr,
                int&nbsp;pos,
                <A HREF="../../thingm/linkm/BlinkMScriptLine.html" title="class in thingm.linkm">BlinkMScriptLine</A>&nbsp;line)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Write a single BlinkM light script line at position 'pos'.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.Object</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Field Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="maxScriptLength"><!-- --></A><H3>
maxScriptLength</H3>
<PRE>
public static final int <B>maxScriptLength</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#thingm.linkm.LinkM.maxScriptLength">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="writePauseMillis"><!-- --></A><H3>
writePauseMillis</H3>
<PRE>
public static final int <B>writePauseMillis</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#thingm.linkm.LinkM.writePauseMillis">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="pausemillis"><!-- --></A><H3>
pausemillis</H3>
<PRE>
public static int <B>pausemillis</B></PRE>
<DL>
<DL>
</DL>
</DL>
<HR>

<A NAME="debug"><!-- --></A><H3>
debug</H3>
<PRE>
public static int <B>debug</B></PRE>
<DL>
<DL>
</DL>
</DL>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="LinkM()"><!-- --></A><H3>
LinkM</H3>
<PRE>
public <B>LinkM</B>()</PRE>
<DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="usage()"><!-- --></A><H3>
usage</H3>
<PRE>
public static void <B>usage</B>()</PRE>
<DL>
<DD>Demonstrates library usage by creating little command-line tool
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="main(java.lang.String[])"><!-- --></A><H3>
main</H3>
<PRE>
public static void <B>main</B>(java.lang.String[]&nbsp;args)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="close()"><!-- --></A><H3>
close</H3>
<PRE>
public void <B>close</B>()</PRE>
<DL>
<DD>Close LinkM dongle
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="bootload(java.lang.String, boolean)"><!-- --></A><H3>
bootload</H3>
<PRE>
public void <B>bootload</B>(java.lang.String&nbsp;filename,
                     boolean&nbsp;reset)
              throws java.io.IOException</PRE>
<DL>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="bootloadReset()"><!-- --></A><H3>
bootloadReset</H3>
<PRE>
public void <B>bootloadReset</B>()
                   throws java.io.IOException</PRE>
<DL>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="open()"><!-- --></A><H3>
open</H3>
<PRE>
public void <B>open</B>()
          throws java.io.IOException</PRE>
<DL>
<DD>Open the first LinkM found
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - if no LinkM found</DL>
</DD>
</DL>
<HR>

<A NAME="commandi2c(byte[], byte[])"><!-- --></A><H3>
commandi2c</H3>
<PRE>
public void <B>commandi2c</B>(byte[]&nbsp;buf_send,
                       byte[]&nbsp;buf_recv)
                throws java.io.IOException</PRE>
<DL>
<DD>Do an I2C transaction via the dongle
 length of both byte arrays determines amount of data sent or received
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>buf_send</CODE> - is byte array of command to send<DD><CODE>buf_recv</CODE> - is byte array of any receive data, may be null
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="setPlayset(boolean, int, int, int, int, int, int)"><!-- --></A><H3>
setPlayset</H3>
<PRE>
public void <B>setPlayset</B>(boolean&nbsp;playing,
                       int&nbsp;script_id,
                       int&nbsp;script_tick,
                       int&nbsp;script_len,
                       int&nbsp;start_pos,
                       int&nbsp;fadespeed,
                       int&nbsp;dir)
                throws java.io.IOException</PRE>
<DL>
<DD>Set the playticker / playset parameters
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>playing</CODE> - on/off state of playTicker<DD><CODE>script_id</CODE> - the script id to play (usually 0)<DD><CODE>script_tick</CODE> - the number of ticks between lines in the script<DD><CODE>script_len</CODE> - the length of the script in script lines<DD><CODE>start_pos</CODE> - starting position of script (usually 0)
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="getPlayset()"><!-- --></A><H3>
getPlayset</H3>
<PRE>
public byte[] <B>getPlayset</B>()
                  throws java.io.IOException</PRE>
<DL>
<DD>Get playticker parameters
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="eeParamSave()"><!-- --></A><H3>
eeParamSave</H3>
<PRE>
public void <B>eeParamSave</B>()
                 throws java.io.IOException</PRE>
<DL>
<DD>Save the playticker parameters from RAM to EEPROM
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="eeParamLoad()"><!-- --></A><H3>
eeParamLoad</H3>
<PRE>
public void <B>eeParamLoad</B>()
                 throws java.io.IOException</PRE>
<DL>
<DD>Load the playticker parameters from EEPROM to RAM
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="getLinkMVersion()"><!-- --></A><H3>
getLinkMVersion</H3>
<PRE>
public byte[] <B>getLinkMVersion</B>()
                       throws java.io.IOException</PRE>
<DL>
<DD>Get LinkM firmware version
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="goBootload()"><!-- --></A><H3>
goBootload</H3>
<PRE>
public void <B>goBootload</B>()
                throws java.io.IOException</PRE>
<DL>
<DD>Tell LinkM to switch to its USB bootloader mode
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="statusLED(int)"><!-- --></A><H3>
statusLED</H3>
<PRE>
public void <B>statusLED</B>(int&nbsp;val)
               throws java.io.IOException</PRE>
<DL>
<DD>Set the state of LinkM's status LED
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>val</CODE> - 1 = turn LED on, 0 = turn LED off
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="i2cScan(int, int)"><!-- --></A><H3>
i2cScan</H3>
<PRE>
public byte[] <B>i2cScan</B>(int&nbsp;start_addr,
                      int&nbsp;end_addr)
               throws java.io.IOException</PRE>
<DL>
<DD>FIXME: currently ignores start_addr and end_addr
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>start_addr</CODE> - start address of scan<DD><CODE>end_addr</CODE> - end address of scan
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="i2cScan16(int, int)"><!-- --></A><H3>
i2cScan16</H3>
<PRE>
public byte[] <B>i2cScan16</B>(int&nbsp;start_addr,
                        int&nbsp;end_addr)
                 throws java.io.IOException</PRE>
<DL>
<DD>Scan the I2C bus
 FIXME: only works for spans up to 16 addrs
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>start_addr</CODE> - start address of scan<DD><CODE>end_addr</CODE> - end address of scan
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="i2cEnable(boolean)"><!-- --></A><H3>
i2cEnable</H3>
<PRE>
public void <B>i2cEnable</B>(boolean&nbsp;state)
               throws java.io.IOException</PRE>
<DL>
<DD>Enable or disable the I2C bus buffer
 By selectively disabling and enabling the bus buffer you can do hotswap
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>state</CODE> - set to true to enable I2C bus, false to disable
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="i2cInit()"><!-- --></A><H3>
i2cInit</H3>
<PRE>
public void <B>i2cInit</B>()
             throws java.io.IOException</PRE>
<DL>
<DD>(Re)Initialize the I2C subsystem on LinkM
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="cmd(int, int, int, int, int)"><!-- --></A><H3>
cmd</H3>
<PRE>
public void <B>cmd</B>(int&nbsp;addr,
                int&nbsp;cmd,
                int&nbsp;arg1,
                int&nbsp;arg2,
                int&nbsp;arg3)
         throws java.io.IOException</PRE>
<DL>
<DD>Send a common 1-cmd + 3-arg style of command, with no response.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - i2c address<DD><CODE>cmd</CODE> - first byte of command<DD><CODE>arg1</CODE> - first argument (if any)<DD><CODE>arg2</CODE> - first argument (if any)<DD><CODE>arg3</CODE> - first argument (if any)
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="off(int)"><!-- --></A><H3>
off</H3>
<PRE>
public void <B>off</B>(int&nbsp;addr)
         throws java.io.IOException</PRE>
<DL>
<DD>Turn BlinkM at address addr off.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - the i2c address of blinkm
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="getVersion(int)"><!-- --></A><H3>
getVersion</H3>
<PRE>
public byte[] <B>getVersion</B>(int&nbsp;addr)
                  throws java.io.IOException</PRE>
<DL>
<DD>Get the version of a BlinkM at a specific address
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - the i2c address
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="setAddress(int, int)"><!-- --></A><H3>
setAddress</H3>
<PRE>
public void <B>setAddress</B>(int&nbsp;addr,
                       int&nbsp;newaddr)
                throws java.io.IOException</PRE>
<DL>
<DD>Sets the I2C address of a BlinkM
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - old address, can be 0 to change all connected BlinkMs<DD><CODE>newaddr</CODE> - new address
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="playScript(int, int, int, int)"><!-- --></A><H3>
playScript</H3>
<PRE>
public void <B>playScript</B>(int&nbsp;addr,
                       int&nbsp;script_id,
                       int&nbsp;reps,
                       int&nbsp;pos)
                throws java.io.IOException</PRE>
<DL>
<DD>Play a light script
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - the i2c address<DD><CODE>script_id</CODE> - id of light script (#0 is reprogrammable one)<DD><CODE>reps</CODE> - number of repeats<DD><CODE>pos</CODE> - position in script to play
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="playScript(int)"><!-- --></A><H3>
playScript</H3>
<PRE>
public void <B>playScript</B>(int&nbsp;addr)
                throws java.io.IOException</PRE>
<DL>
<DD>Plays the eeprom script (script id 0) from start, forever
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - the i2c address of blinkm
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="stopScript(int)"><!-- --></A><H3>
stopScript</H3>
<PRE>
public void <B>stopScript</B>(int&nbsp;addr)
                throws java.io.IOException</PRE>
<DL>
<DD>Stop any playing script at address 'addr'
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - the i2c address of blinkm
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="setRGB(int, int, int, int)"><!-- --></A><H3>
setRGB</H3>
<PRE>
public void <B>setRGB</B>(int&nbsp;addr,
                   int&nbsp;r,
                   int&nbsp;g,
                   int&nbsp;b)
            throws java.io.IOException</PRE>
<DL>
<DD>Set the blinkm at 'addr' to the specified RGB color
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - the i2c address of blinkm<DD><CODE>r</CODE> - red component, 8-bit<DD><CODE>g</CODE> - green component, 8-bit<DD><CODE>b</CODE> - blue component, 8-bit
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="setRGB(int, java.awt.Color)"><!-- --></A><H3>
setRGB</H3>
<PRE>
public void <B>setRGB</B>(int&nbsp;addr,
                   java.awt.Color&nbsp;color)
            throws java.io.IOException</PRE>
<DL>
<DD>Set the blinkm at 'addr' to the specified RGB color
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - the i2c address of blinkm<DD><CODE>color</CODE> - the color to set
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="fadeToRGB(int, int, int, int)"><!-- --></A><H3>
fadeToRGB</H3>
<PRE>
public void <B>fadeToRGB</B>(int&nbsp;addr,
                      int&nbsp;r,
                      int&nbsp;g,
                      int&nbsp;b)
               throws java.io.IOException</PRE>
<DL>
<DD>Fade the blinkm at 'addr' to the specified color
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - the i2c address of blinkm<DD><CODE>r</CODE> - red component, 8-bit<DD><CODE>g</CODE> - green component, 8-bit<DD><CODE>b</CODE> - blue component, 8-bit
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="fadeToRGB(int, java.awt.Color)"><!-- --></A><H3>
fadeToRGB</H3>
<PRE>
public void <B>fadeToRGB</B>(int&nbsp;addr,
                      java.awt.Color&nbsp;color)
               throws java.io.IOException</PRE>
<DL>
<DD>Fade the blinkm at 'addr' to the specified color
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - the i2c address of blinkm<DD><CODE>color</CODE> - the color to set
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="fadeToRGB(int[], java.awt.Color[], int)"><!-- --></A><H3>
fadeToRGB</H3>
<PRE>
public void <B>fadeToRGB</B>(int[]&nbsp;addrs,
                      java.awt.Color[]&nbsp;colors,
                      int&nbsp;count)
               throws java.io.IOException</PRE>
<DL>
<DD>Fade a list of devices to a list of RGB colors
 FIXME: this doesn't work
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addrs</CODE> - list of i2c addresses<DD><CODE>colors</CODE> - list of colors<DD><CODE>count</CODE> - number of items in list
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="fadeToRandomRGB(int, int, int, int)"><!-- --></A><H3>
fadeToRandomRGB</H3>
<PRE>
public void <B>fadeToRandomRGB</B>(int&nbsp;addr,
                            int&nbsp;r,
                            int&nbsp;g,
                            int&nbsp;b)
                     throws java.io.IOException</PRE>
<DL>
<DD>Fade to a random color.  
 Here the r,g,b components are the amount of random for each color channel
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - the i2c address of blinkm<DD><CODE>r</CODE> - red component, 8-bit<DD><CODE>g</CODE> - green component, 8-bit<DD><CODE>b</CODE> - blue component, 8-bit
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="fadeToHSB(int, int, int, int)"><!-- --></A><H3>
fadeToHSB</H3>
<PRE>
public void <B>fadeToHSB</B>(int&nbsp;addr,
                      int&nbsp;h,
                      int&nbsp;s,
                      int&nbsp;b)
               throws java.io.IOException</PRE>
<DL>
<DD>Fade to a color by HSB.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - the i2c address of blinkm<DD><CODE>h</CODE> - hue component, 8-bit<DD><CODE>s</CODE> - saturation component, 8-bit<DD><CODE>b</CODE> - brightness component, 8-bit
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="fadeToRandomHSB(int, int, int, int)"><!-- --></A><H3>
fadeToRandomHSB</H3>
<PRE>
public void <B>fadeToRandomHSB</B>(int&nbsp;addr,
                            int&nbsp;h,
                            int&nbsp;s,
                            int&nbsp;b)
                     throws java.io.IOException</PRE>
<DL>
<DD>Fade to a random HSB color.  
 Here the r,g,b components are the amount of random for each color channel
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - the i2c address of blinkm<DD><CODE>h</CODE> - hue component, 8-bit<DD><CODE>s</CODE> - saturation component, 8-bit<DD><CODE>b</CODE> - brightness component, 8-bit
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="getRGBColor(int)"><!-- --></A><H3>
getRGBColor</H3>
<PRE>
public java.awt.Color <B>getRGBColor</B>(int&nbsp;addr)
                           throws java.io.IOException</PRE>
<DL>
<DD>Return the RGB color the BlinkM is currently at.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - the i2c address of blinkm
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="setFadeSpeed(int, int)"><!-- --></A><H3>
setFadeSpeed</H3>
<PRE>
public void <B>setFadeSpeed</B>(int&nbsp;addr,
                         int&nbsp;fadespeed)
                  throws java.io.IOException</PRE>
<DL>
<DD>Set fade speed of a BlinkM
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - the i2c address of blinkm<DD><CODE>fadespeed</CODE> - fadespeed value (1 = very slow, 255 = instantaneous)
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="setTimeAdj(int, int)"><!-- --></A><H3>
setTimeAdj</H3>
<PRE>
public void <B>setTimeAdj</B>(int&nbsp;addr,
                       int&nbsp;timeadj)
                throws java.io.IOException</PRE>
<DL>
<DD>Set time adjust of a BlinkM light script playing
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - the i2c address of blinkm<DD><CODE>timeadj</CODE> - time adjust amount (0 = no adjust, negative = faster, positve = slower)
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="setStartupParams(int, int, int, int, int, int)"><!-- --></A><H3>
setStartupParams</H3>
<PRE>
public void <B>setStartupParams</B>(int&nbsp;addr,
                             int&nbsp;mode,
                             int&nbsp;script_id,
                             int&nbsp;reps,
                             int&nbsp;fadespeed,
                             int&nbsp;timeadj)
                      throws java.io.IOException</PRE>
<DL>
<DD>Set boot params   cmd,mode,id,reps,fadespeed,timeadj
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - the i2c address of blinkm
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="setStartupParamsDefault(int)"><!-- --></A><H3>
setStartupParamsDefault</H3>
<PRE>
public void <B>setStartupParamsDefault</B>(int&nbsp;addr)
                             throws java.io.IOException</PRE>
<DL>
<DD>Default values for startup params
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - the i2c address of blinkm
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="setScriptLengthRepeats(int, int, int)"><!-- --></A><H3>
setScriptLengthRepeats</H3>
<PRE>
public void <B>setScriptLengthRepeats</B>(int&nbsp;addr,
                                   int&nbsp;len,
                                   int&nbsp;reps)
                            throws java.io.IOException</PRE>
<DL>
<DD>Set light script default length and repeats.
 reps == 0 means infinite repeats
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - the i2c address of blinkm
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="readInputs(int)"><!-- --></A><H3>
readInputs</H3>
<PRE>
public byte[] <B>readInputs</B>(int&nbsp;addr)
                  throws java.io.IOException</PRE>
<DL>
<DD>Read inputs on BlinkMs that have inputs
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - the i2c address of blinkm
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="writeScript(int, java.lang.String)"><!-- --></A><H3>
writeScript</H3>
<PRE>
public void <B>writeScript</B>(int&nbsp;addr,
                        java.lang.String&nbsp;scriptstr)
                 throws java.io.IOException</PRE>
<DL>
<DD>Write an entire light script contained in a string
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - the i2c address of blinkm
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="writeScript(int, thingm.linkm.BlinkMScript)"><!-- --></A><H3>
writeScript</H3>
<PRE>
public void <B>writeScript</B>(int&nbsp;addr,
                        <A HREF="../../thingm/linkm/BlinkMScript.html" title="class in thingm.linkm">BlinkMScript</A>&nbsp;script)
                 throws java.io.IOException</PRE>
<DL>
<DD>Write an entire BlinkM light script as a BlinkMScript
 to blinkm at address 'addr'.
 NOTE: for a 48-line script, this takes about 858 msecs because of 
       enforced 10 msec delay and HID overhead from small report size
 FIXME: speed this up by implementing second report size
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - the i2c address of blinkm<DD><CODE>script</CODE> - BlinkMScript object of script lines
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="writeScriptLine(int, int, thingm.linkm.BlinkMScriptLine)"><!-- --></A><H3>
writeScriptLine</H3>
<PRE>
public void <B>writeScriptLine</B>(int&nbsp;addr,
                            int&nbsp;pos,
                            <A HREF="../../thingm/linkm/BlinkMScriptLine.html" title="class in thingm.linkm">BlinkMScriptLine</A>&nbsp;line)
                     throws java.io.IOException</PRE>
<DL>
<DD>Write a single BlinkM light script line at position 'pos'.
 FIXME: hard-coded script_id 0 (only one that can be written for now, still)
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - the i2c address of blinkm
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="readScriptLine(int, int, int)"><!-- --></A><H3>
readScriptLine</H3>
<PRE>
public <A HREF="../../thingm/linkm/BlinkMScriptLine.html" title="class in thingm.linkm">BlinkMScriptLine</A> <B>readScriptLine</B>(int&nbsp;addr,
                                       int&nbsp;script_id,
                                       int&nbsp;pos)
                                throws java.io.IOException</PRE>
<DL>
<DD>Read a BlinkMScriptLine from 'script_id' and pos 'pos', 
 from BlinkM at 'addr'.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - the i2c address of blinkm
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="readScript(int, int, boolean)"><!-- --></A><H3>
readScript</H3>
<PRE>
public <A HREF="../../thingm/linkm/BlinkMScript.html" title="class in thingm.linkm">BlinkMScript</A> <B>readScript</B>(int&nbsp;addr,
                               int&nbsp;script_id,
                               boolean&nbsp;readAll)
                        throws java.io.IOException</PRE>
<DL>
<DD>Read an entire light script from a BlinkM at address 'addr' 
 FIXME: this only really works for script_id==0
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - the i2c address of blinkm<DD><CODE>script_id</CODE> - id of script to read from (usually 0)<DD><CODE>readAll</CODE> - read all script lines, or just the good ones
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="readScriptToString(int, int, boolean)"><!-- --></A><H3>
readScriptToString</H3>
<PRE>
public java.lang.String <B>readScriptToString</B>(int&nbsp;addr,
                                           int&nbsp;script_id,
                                           boolean&nbsp;readAll)
                                    throws java.io.IOException</PRE>
<DL>
<DD>Read an entire light script, return as a string
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - the i2c address of blinkm
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="doFactoryReset(int)"><!-- --></A><H3>
doFactoryReset</H3>
<PRE>
public void <B>doFactoryReset</B>(int&nbsp;addr)
                    throws java.io.IOException</PRE>
<DL>
<DD>Set a BlinkM back to factory settings
 Sets the i2c address to 0x09
 Writes a new light script and sets the startup paramters
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - the i2c address of blinkm
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on transmit or receive error</DL>
</DD>
</DL>
<HR>

<A NAME="debug(java.lang.String)"><!-- --></A><H3>
debug</H3>
<PRE>
public static void <B>debug</B>(java.lang.String&nbsp;s)</PRE>
<DL>
<DD>simple debug facilty
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>s</CODE> - string to print out for debug purposes</DL>
</DD>
</DL>
<HR>

<A NAME="respSizeForCommand(int)"><!-- --></A><H3>
respSizeForCommand</H3>
<PRE>
public static final int <B>respSizeForCommand</B>(int&nbsp;c)</PRE>
<DL>
<DD>Essentially a sparse-array lookup-table for those commands that may 
 return a value.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>c</CODE> - command code character</DL>
</DD>
</DL>
<HR>

<A NAME="loadFile(java.lang.String)"><!-- --></A><H3>
loadFile</H3>
<PRE>
public static final java.lang.String[] <B>loadFile</B>(java.lang.String&nbsp;filename)</PRE>
<DL>
<DD>Load a text file and turn it into an array of Strings.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>filename</CODE> - name of file to load</DL>
</DD>
</DL>
<HR>

<A NAME="loadFile(java.io.File)"><!-- --></A><H3>
loadFile</H3>
<PRE>
public static final java.lang.String[] <B>loadFile</B>(java.io.File&nbsp;filename)</PRE>
<DL>
<DD>Load a text file and turn it into an array of Strings.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>filename</CODE> - name of file to load</DL>
</DD>
</DL>
<HR>

<A NAME="saveFile(java.lang.String, java.lang.String)"><!-- --></A><H3>
saveFile</H3>
<PRE>
public static final boolean <B>saveFile</B>(java.lang.String&nbsp;filename,
                                     java.lang.String&nbsp;scriptstr)</PRE>
<DL>
<DD>Save a script in string format to a file
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>filename</CODE> - name of file to write<DD><CODE>scripstr</CODE> - script in String format</DL>
</DD>
</DL>
<HR>

<A NAME="saveFile(java.io.File, java.lang.String)"><!-- --></A><H3>
saveFile</H3>
<PRE>
public static final boolean <B>saveFile</B>(java.io.File&nbsp;file,
                                     java.lang.String&nbsp;scriptstr)</PRE>
<DL>
<DD>Take a script in String format and save it to as a text file.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>file</CODE> - file to write<DD><CODE>scripstr</CODE> - script in String format</DL>
</DD>
</DL>
<HR>

<A NAME="parseScript(java.lang.String)"><!-- --></A><H3>
parseScript</H3>
<PRE>
public static final <A HREF="../../thingm/linkm/BlinkMScript.html" title="class in thingm.linkm">BlinkMScript</A> <B>parseScript</B>(java.lang.String&nbsp;scriptstr)</PRE>
<DL>
<DD>Take a String containing an entire script and turn it into a BlinkMScript
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>scripstr</CODE> - script in String format</DL>
</DD>
</DL>
<HR>

<A NAME="parseScript(java.lang.String[])"><!-- --></A><H3>
parseScript</H3>
<PRE>
public static final <A HREF="../../thingm/linkm/BlinkMScript.html" title="class in thingm.linkm">BlinkMScript</A> <B>parseScript</B>(java.lang.String[]&nbsp;lines)</PRE>
<DL>
<DD>Take an array of Strings and turn them into a BlinkMScript object
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="parseScripts(java.lang.String[])"><!-- --></A><H3>
parseScripts</H3>
<PRE>
public static final <A HREF="../../thingm/linkm/BlinkMScript.html" title="class in thingm.linkm">BlinkMScript</A>[] <B>parseScripts</B>(java.lang.String[]&nbsp;lines)</PRE>
<DL>
<DD>Take an array of Strings and turn them into an array BlinkMScripts
 (assumes the strings actually comprised more than one script)
 FIXME: this is a really dumb way of doing this, gotta think more Perly
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="pause(int)"><!-- --></A><H3>
pause</H3>
<PRE>
public static final void <B>pause</B>(int&nbsp;millis)</PRE>
<DL>
<DD>Utility: A simple delay
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="println(java.lang.String)"><!-- --></A><H3>
println</H3>
<PRE>
public static final void <B>println</B>(java.lang.String&nbsp;s)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="print(java.lang.String)"><!-- --></A><H3>
print</H3>
<PRE>
public static final void <B>print</B>(java.lang.String&nbsp;s)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="printHexString(java.lang.String, byte[])"><!-- --></A><H3>
printHexString</H3>
<PRE>
public static final void <B>printHexString</B>(java.lang.String&nbsp;intro,
                                        byte[]&nbsp;buf)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="hex(int, int)"><!-- --></A><H3>
hex</H3>
<PRE>
public static final java.lang.String <B>hex</B>(int&nbsp;what,
                                         int&nbsp;digits)</PRE>
<DL>
<DD>Utility: int to string
 Stolen from Processing's PApplet.java
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="parseArgBuf(java.lang.String)"><!-- --></A><H3>
parseArgBuf</H3>
<PRE>
public static final byte[] <B>parseArgBuf</B>(java.lang.String&nbsp;s)</PRE>
<DL>
<DD>Utility: Split up a string into parts, each parsed as a num,hex,char
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="parseHexDecInt(java.lang.String)"><!-- --></A><H3>
parseHexDecInt</H3>
<PRE>
public static final int <B>parseHexDecInt</B>(java.lang.String&nbsp;s)</PRE>
<DL>
<DD>Utility: parse a hex or decimal integer
<P>
<DD><DL>
</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../thingm/linkm/package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../thingm/linkm/BlinkMScriptLine.html" title="class in thingm.linkm"><B>PREV CLASS</B></A>&nbsp;
&nbsp;NEXT CLASS</FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../index.html?thingm/linkm/LinkM.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="LinkM.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
